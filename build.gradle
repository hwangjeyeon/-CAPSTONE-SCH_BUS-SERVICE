plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.0'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'jacoco'
}

jacoco {
	toolVersion = '0.8.11'
}

jacocoTestReport{
	afterEvaluate{
		classDirectories.setFrom(
				files(classDirectories.files.collect{
					fileTree(dir: it, excludes: [
					        "**/*Application*",
							"**/*Config*",
							"**/*Dto*",
							"**/*Interceptor*",
							"**/*Exception*",
							"**/*Error*",
							"**/*Q*"
					])
				})
		)
	}
}

jacocoTestCoverageVerification{
	violationRules {

		rule{
			element = 'CLASS'
			enabled = true

			excludes = [
					"**.*Application*",
					"**.*Config*",
					"**.*Dto*",
					"**.*Request",
					"**.*Response",
					"**.*Interceptor*",
					"**.*Exception",
					"**.*Q*"
			]
		}


	}
}

group = 'graduation'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.9.1'
	implementation 'org.springframework.boot:spring-boot-starter-aop'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'io.micrometer:micrometer-registry-prometheus'

	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	//test 롬복 사용
	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'
	//Querydsl 추가
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy 'jacocoTestReport'
}

tasks.withType(Test) {
	jacoco.includeNoLocationClasses = true
	jacoco.excludes = ['jdk.internal.*']
}

tasks.withType(JavaCompile){
	options.encoding = "UTF-8"
}